---

parameters:
  - name: serviceConnection
    type: string

steps:
  - task: AzureCLI@2
    name: apply_database_changes
    displayName: Apply database changes
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      addSpnToEnvironment: true
      failOnStandardError: false
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        # Exit immediately if a command exits with a non-zero status
        set -eo pipefail

        subscriptionId=$(TF_VAR_TARGET_SUBSCRIPTION_ID)
        az account set -s $subscriptionId

        managedIdentityClientIdSQL=$(az identity show --id $(MANAGED_IDENTITY_ID_SQL) --query "{clientId: clientId}" -o tsv)

        # Export the variables for use in the container instance creation:
        export CONTAINER_GROUP_NAME='$(DB_MIGRATION_CONTAINER_GROUP_NAME)'
        export CONTAINER_NAME='$(DB_MIGRATION_CONTAINER_NAME)'
        export CONTAINER_IMAGE='$(SRC_REGISTRY).azurecr.io/$(DB_MIGRATION_IMAGE_NAME):$(ADD_IMAGE_TAG)'
        export ACR_SERVER='$(SRC_REGISTRY).azurecr.io'
        export MI_ID_ACR="$(MANAGED_IDENTITY_ID_ACR)"
        export MI_ID_SQL="$(MANAGED_IDENTITY_ID_SQL)"
        export SQL_IDENTITY_CLIENT_ID="$managedIdentityClientIdSQL"
        export SQL_CONNECTION_STRING='$(DTOS_DATABASE_CONNECTION_STRING)'

        # Create a temporary file to store the substituted YAML
        temp_yaml=$(mktemp)

        # Substitute environment variables and write to the temporary file
        envsubst < $(Build.SourcesDirectory)/dtos-devops-templates/.azuredevops/templates/resources/deploy-container-instance-sql-db-migration.yaml > "$temp_yaml"

        # az container create \
        #     --name $(DB_MIGRATION_CONTAINER_GROUP_NAME) \
        #     --resource-group $(RESOURCE_GROUP_NAME_SQL) \
        #     --subscription $subscriptionId \
        #     --file "${temp_yaml}" \
        #     --verbose
