parameters:
- name: serviceConnection
  type: string
- name: testProjectDirectory
  type: string
- name: testProjectName
  type: string
- name: testfileDirectory
  type: string

steps:
# Clean Build Directory
- task: DeleteFiles@1
  displayName: 'Clean Build Directory'
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)'
    Contents: |
      **/bin/*
      **/obj/*
      **/TestResults/*
      **/drop/*
    RemoveSourceFolder: false

# Decrypt Parquet File
- script: |
    echo "Current working directory:"
    pwd
    echo "Contents of the directory:"
    ls -la
    echo "decrypt files ..."
    gpg --batch --yes --passphrase $(ENCRYPTION_PASSWORD) -o ADD_2_RECORDS_-_CAAS_BREAST_SCREENING_COHORT.parquet -d ADD_2_RECORDS_-_CAAS_BREAST_SCREENING_COHORT.parquet.gpg
  displayName: 'Decrypt Parquet File'
  workingDirectory: '$(System.DefaultWorkingDirectory)/${{ parameters.testProjectDirectory }}/${{parameters.testfileDirectory}}'

# Copy Test Files
- task: PowerShell@2
  displayName: 'Copy Test Files'
  inputs:
    targetType: 'inline'
    script: |
      $sourcePath = "$(System.DefaultWorkingDirectory)/${{ parameters.testProjectDirectory }}/${{parameters.testfileDirectory}}"
      $targetPath = "$(Build.ArtifactStagingDirectory)/TestFiles"

      Write-Host "Source path: $sourcePath"
      Write-Host "Target path: $targetPath"

      # Check if the source directory exists
      if (!(Test-Path -Path $sourcePath)) {
        Write-Error "Source directory not found: $sourcePath"
        exit 1
      }

      # Create the target directory if it doesn't exist
      if (!(Test-Path -Path $targetPath)) {
        New-Item -ItemType Directory -Path $targetPath -Force
      }

      # Copy the files
      Copy-Item -Path "$sourcePath\*" -Destination $targetPath -Recurse -Force

      # Verify files were copied
      Write-Host "Files copied to target directory:"
      Get-ChildItem -Path $targetPath -Recurse | ForEach-Object { Write-Host $_.FullName }

# Publish Test Files
- task: PublishBuildArtifacts@1
  displayName: 'Publish Test Files'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'TestFiles'
    publishLocation: 'Container'

# Export Identity Config
- script: |
    export AZURE_IDENTITY_DISABLE_MANAGED_IDENTITY=true
  displayName: 'Export Identity Config'

# Install Node.js
- task: NodeTool@0
  displayName: 'Install Node.js'
  inputs:
    versionSpec: '22.x'

# Install npm Dependencies
- script: |
    npm install
  displayName: 'Install npm dependencies'
  workingDirectory: '$(System.DefaultWorkingDirectory)/${{ parameters.testProjectDirectory }}'

# Run Playwright Tests
- script: |
    echo "Current working directory:"
    pwd
    echo "Contents of the directory:"
    ls -la
    echo "Running tests..."
    npm test
  displayName: 'Run Tests'
  workingDirectory: '$(System.DefaultWorkingDirectory)/${{ parameters.testProjectDirectory }}'
  env:
    CONTAINER_NAME: $(CONTAINER_NAME)
    Is_CloudEnvironment: $(Is_CloudEnvironment)
    CAASFOLDER_STORAGE_CONNECTION_STRING: $(CAASFOLDER_STORAGE_CONNECTION_STRING)
    ENDPOINT_COHORT_DISTRIBUTION_DATA_SERVICE: $(ENDPOINT_COHORT_DISTRIBUTION_DATA_SERVICE)
    ENDPOINT_PARTICIPANT_MANAGEMENT_DATA_SERVICE: $(ENDPOINT_PARTICIPANT_MANAGEMENT_DATA_SERVICE)
    ENDPOINT_EXCEPTION_MANAGEMENT_DATA_SERVICE: $(ENDPOINT_EXCEPTION_MANAGEMENT_DATA_SERVICE)

# Publish Playwright HTML Report
- task: PublishBuildArtifacts@1
  displayName: 'Publish Playwright Test Reports'
  inputs:
    PathtoPublish: '$(System.DefaultWorkingDirectory)/${{ parameters.testProjectDirectory }}/src/config/playwright-report'
    ArtifactName: 'PlaywrightHTMLReport'
    publishLocation: 'Container'

# Publish JUnit Test Results
- task: PublishTestResults@2
  displayName: 'Publish JUnit Test Results'
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '$(System.DefaultWorkingDirectory)/${{ parameters.testProjectDirectory }}/src/config/playwright-report/results.xml'
    failTaskOnFailedTests: true
    mergeTestResults: true
    publishRunAttachments: true
