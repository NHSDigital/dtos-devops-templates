---

parameters:
- name: serviceConnection
  type: string
- name: testProjectDirectory
  type: string
- name: testProjectName
  type: string
- name: testfileDirectory
  type: string

steps:
- task: DeleteFiles@1
  displayName: 'Clean Build Directory'
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)'
    Contents: |
      **/bin/*
      **/obj/*
      **/TestResults/*
      **/drop/*
    RemoveSourceFolder: false

- task: PowerShell@2
  displayName: 'Copy Test Files'
  inputs:
    targetType: 'inline'
    script: |
      $sourcePath = '$(System.DefaultWorkingDirectory)/${{ parameters.testProjectDirectory }}/${{parameters.testfileDirectory}}'
      $targetPath = '$(Build.ArtifactStagingDirectory)/TestFiles'
      dir
      dir $(System.DefaultWorkingDirectory)
      dir $(System.DefaultWorkingDirectory)/${{ parameters.testProjectDirectory }}
      dir $(System.DefaultWorkingDirectory)/${{ parameters.testProjectDirectory }}/${{parameters.testfileDirectory}}

      # Check if the source directory exists
      if (!(Test-Path -Path $sourcePath)) {
        Write-Error "Source directory not found: $sourcePath"
        exit 1
      }

      # Create the target directory if it doesn't exist
      if (!(Test-Path -Path $targetPath)) {
        New-Item -ItemType Directory -Path $targetPath
      }

      # Copy the files
      Copy-Item -Path $sourcePath -Destination $targetPath -Recurse -Force

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'TestFiles'

- task: DownloadBuildArtifacts@0
  inputs:
    buildType: 'current'
    downloadType: 'single'
    artifactName: 'TestFiles'
    downloadPath: '$(System.DefaultWorkingDirectory)'

- script: |
    export AZURE_IDENTITY_DISABLE_MANAGED_IDENTITY=true
  displayName: 'Export Identity Config'

- task: NodeTool@0
  inputs:
    versionSpec: '22.x'
  displayName: 'Install Node.js'

- task: NodeTool@1
  displayName: 'Run Tests'
  inputs:
    command: 'cd $(System.DefaultWorkingDirectory)/${{ parameters.testProjectDirectory }}'
    command: 'npm install && npm test'
    projects: '$(System.DefaultWorkingDirectory)/${{ parameters.testProjectDirectory }}'
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)

- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: '**/*.trx'
    testRunTitle: 'Tests'
    mergeTestResults: true
    createTestRun: true
    testResultFormat: VSTest
    azureSubscription: ${{ parameters.serviceConnection }}
