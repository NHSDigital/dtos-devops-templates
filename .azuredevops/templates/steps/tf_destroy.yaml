---

parameters:
  - name: tfCommandOptions
    type: string
    default: ''

steps:
  - template: tf_init.yaml

  - task: TerraformTaskV4@4
    name: TerraformDestroy
    displayName: Terraform Destroy - $(ENVIRONMENT) environment
    continueOnError: false
    inputs:
      provider: azurerm
      command: destroy
      workingDirectory: $(TF_DIRECTORY)
      commandOptions: -var-file=$(tfVarsFile) ${{ parameters.tfCommandOptions }} -var="environment=$(ENVIRONMENT)"
      environmentServiceNameAzureRM: $(SERVICE_CONNECTION)

  - task: AzureCLI@2
    displayName: Clean-up Backend
    inputs:
      azureSubscription: $(SERVICE_CONNECTION)
      scriptLocation: inlineScript
      scriptType: bash
      workingDirectory: $(tfExecutionDir)
      inlineScript: |
        # Check if the backend configuration file exists and if it does, delete it:
        container_exists=$(az storage container exists --name $(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME) --account-name $(BACKEND_AZURE_STORAGE_ACCOUNT_NAME) --auth-mode login --output tsv)
        if [ "$container_exists" == "True" ]; then
          echo "##[debug] Container $(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME) exists, deleting it..."
          #az storage container delete --name $(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME) --account-name $(BACKEND_AZURE_STORAGE_ACCOUNT_NAME) --resource-group $(BACKEND_AZURE_RESOURCE_GROUP_NAME) --auth-mode login --yes
        else
          echo "##[debug] Container $(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME) does not exist."
        fi
